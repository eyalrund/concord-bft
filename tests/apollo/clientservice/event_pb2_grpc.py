# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import event_pb2 as event__pb2


class EventServiceStub(object):
    """Service error handling
    Each service method will return a gRPC status object.
    All errors are mapped to the common gRPC error codes defined here: https://grpc.github.io/grpc/core/md_doc_statuscodes.html
    See each method for concrete explanations below.

    The EventService can be used to read old events and listen for new ones.
    Concord Client queries a quorum of replicas to validate those events.
    The replicas will filter and deliver all events in EventGroups in the order they were created.
    Concord Client will continuously try to get new EventGroups once the subscription has been established.
    If the user encounters errors then it is recommended to check the service's health via
    gRPC's health check API or re-subscribe with exponential back-off to its last known event group id.
    https://github.com/grpc/grpc/blob/master/doc/health-checking.md
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Subscribe = channel.unary_stream(
                '/vmware.concord.client.event.v1.EventService/Subscribe',
                request_serializer=event__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=event__pb2.SubscribeResponse.FromString,
                )


class EventServiceServicer(object):
    """Service error handling
    Each service method will return a gRPC status object.
    All errors are mapped to the common gRPC error codes defined here: https://grpc.github.io/grpc/core/md_doc_statuscodes.html
    See each method for concrete explanations below.

    The EventService can be used to read old events and listen for new ones.
    Concord Client queries a quorum of replicas to validate those events.
    The replicas will filter and deliver all events in EventGroups in the order they were created.
    Concord Client will continuously try to get new EventGroups once the subscription has been established.
    If the user encounters errors then it is recommended to check the service's health via
    gRPC's health check API or re-subscribe with exponential back-off to its last known event group id.
    https://github.com/grpc/grpc/blob/master/doc/health-checking.md
    """

    def Subscribe(self, request, context):
        """Subscribe to a continuous stream of events from the blockchain.
        Note: Only one active stream per Concord client is supported at this time.
        The active stream has to be cancelled first before a new stream can be established.
        Errors:
        OUT_OF_RANGE: if the requested starting point is not available yet. See SubscribeRequest for details.
        NOT_FOUND: if the requested starting point was pruned. See SubscribeRequest for details.
        RESOURCE_EXHAUSTED: if Concord Client is overloaded. The caller should retry with a backoff.
        UNAVAILABLE: if Concord Client is currently unable to process any requests. The caller should retry with a backoff.
        INTERNAL: if Concord Client cannot progress independent of the request.
        ALREADY_EXISTS: if Concord Client serves an active stream already. See note above.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=event__pb2.SubscribeRequest.FromString,
                    response_serializer=event__pb2.SubscribeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vmware.concord.client.event.v1.EventService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EventService(object):
    """Service error handling
    Each service method will return a gRPC status object.
    All errors are mapped to the common gRPC error codes defined here: https://grpc.github.io/grpc/core/md_doc_statuscodes.html
    See each method for concrete explanations below.

    The EventService can be used to read old events and listen for new ones.
    Concord Client queries a quorum of replicas to validate those events.
    The replicas will filter and deliver all events in EventGroups in the order they were created.
    Concord Client will continuously try to get new EventGroups once the subscription has been established.
    If the user encounters errors then it is recommended to check the service's health via
    gRPC's health check API or re-subscribe with exponential back-off to its last known event group id.
    https://github.com/grpc/grpc/blob/master/doc/health-checking.md
    """

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/vmware.concord.client.event.v1.EventService/Subscribe',
            event__pb2.SubscribeRequest.SerializeToString,
            event__pb2.SubscribeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
